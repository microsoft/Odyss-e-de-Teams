version: "3.7"

services:
  frontend:
    container_name: odyssee_teams_web
    stdin_open: true
    build:
      context: ./client
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV}
      - REACT_APP_API_URL= ${API_URL}
      - REACT_APP_STATIC_URL=${STATIC_URL}
      - REACT_APP_API_TOKEN= ${API_TOKEN}
      - REACT_APP_AZUREAD_ApplicationId= ${AZUREAD_ApplicationId}
      - REACT_APP_AZUREAD_BaseUri= ${AZUREAD_BaseUri}
    ports:
      - "3000:3000"
    volumes:
      - ./client:/usr/src/app
      - /usr/src/app/node_modules
  postgres:
    image: postgres:12.2
    container_name: odyssee_teams_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      PGDATA: /tmp
    volumes:
      - ./postgres/data:/var/lib/postgresql/data:cached
      - ./postgres/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
      - ./postgres/data.sql:/docker-entrypoint-initdb.d/2-data.sql
    ports:
      - "5433:5432"
    restart: always
  backend:
    container_name: odyssee_teams_server
    environment:
      DATABASE_URL: ${DATABASE_URL}
      AZUREAD_APPLICATION_ID: ${AZUREAD_ApplicationId}
      AZUREAD_APP_SECRET: ${AZUREAD_APP_SECRET}
      AZUREAD_ANNUAIRE_ID: ${AZUREAD_ANNUAIRE_ID}
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./server:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - postgres
    command: ["./wait-for-it.sh", "db:5432", "--", "nodemon", "server.js"]
volumes:
  node_modules:
